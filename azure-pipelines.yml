
# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  projectPath: 'src/App/App.csproj'
  imageOwner: 'ramosisw'

steps:
- script: dotnet build --configuration $(buildConfiguration) $(projectPath)
  displayName: 'dotnet build $(buildConfiguration)'

# - script: |
#     dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/Coverage/ /p:Exclude=\"[xunit*]*,[App*]Auto*\" --logger trx
#   displayName: 'dotnet tests'

# - task: PublishTestResults@2
#   inputs:
#     testRunner: VSTest
#     testResultsFiles: '**/*.trx'
#   displayName: 'publish tests'

# - task: PublishCodeCoverageResults@1
#   inputs:
#     codeCoverageTool: 'cobertura'
#     summaryFileLocation: '**/*.xml'
#   displayName: 'publish coverage'

- script: |
    dotnet publish --configuration $(buildConfiguration) --runtime linux-arm --output out.arm $(projectPath)
    # dotnet publish --configuration $(buildConfiguration) --runtime linux-x64 --output out.amd64 $(projectPath)
  displayName: 'dotnet publish $(buildConfiguration)'
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], '[Deploy]'))

- script: |
    docker build -f src/App/arm.dockerfile -t $(imageOwner)/portify:arm .
    # docker build -f src/App/amd64.dockerfile -t $(imageOwner)/portify:amd64 .
  displayName: 'docker build arm & amd64'
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], '[Deploy]'))

- task: Docker@1
  displayName: Push docker image
  inputs:
    command: push
    containerRegistryType: 'Container Registry'
    dockerRegistryEndpoint: 'Docker Hub'
    imageName: $(imageOwner)/portify
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], '[Deploy]'))

- task: SSH@0
  inputs:
    sshEndpoint: wayproyect
    runOptions: 'commands'
    commands: '/var/www/wayproyect.com/portify/run.sh'
    failOnStdErr: false
  displayName: 'Run shell commands on remote machine'
  condition: and(succeeded(), startsWith(variables['Build.SourceVersionMessage'], '[Deploy]'))

